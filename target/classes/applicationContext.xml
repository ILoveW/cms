<?xml version="1.0" encoding="UTF-8"?>
		<!--
		xlns 区分xml文件和其他文件 
		xsi遵循规则 
		-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用 -->
	<mvc:annotation-driven />
	<context:component-scan base-package="com.gft.dao"></context:component-scan>
	<context:component-scan base-package="com.gft.entity"></context:component-scan>
	<context:component-scan base-package="com.gft.service"></context:component-scan>
	<context:component-scan base-package="com.gft.aspectj" />
	<context:component-scan base-package="com.gft.Log" />
	<context:component-scan base-package="com.gft.IsVialidLoginIntercepter"></context:component-scan>
	
	<context:annotation-config/>    
	<aop:aspectj-autoproxy />  
	<context:component-scan base-package="com.gft.aspectj" /> 

	<!-- 读取动态设定Mysqljdbc.properties的参数配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:Mysqljdbc.properties" />
	</bean>
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		</bean>
	<!-- 跟Spring的事务进行关联，确保当前被使用的SqlSession是一个已经和Spring的事务进行绑定 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="WEB-INF/conf/sql/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.gft.entity" />
	</bean>
	<!-- 用SqlSession实例来执行映射语句，commit，rollback，close等方法-->
	<!-- sqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 切面 -->
	<bean id="Sl4jLogerAspectj" class="com.gft.aspectj.Sl4jLogerAspectj"></bean>
	<!-- 切点 -->
	<aop:config>
	<!-- 切面表达式 -->
	<!-- 第一个*代表方法返回值
		..*表示扫描到方法级别
		.*是任意方法(在这里)
		(..)方法的任意参数
	 -->
		<aop:pointcut expression="execution(* com.gft.service..*.*(..))"
			id="pointCut" />
		<aop:aspect ref="Sl4jLogerAspectj">
		<!-- 执行前 -->
			<aop:before method="sl4Jbefore" pointcut-ref="pointCut" />
		<!-- 执行后 -->
			<aop:after method="sl4Jafter" pointcut-ref="pointCut" />
		</aop:aspect>

	</aop:config>
	
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务通知 -->		<!-- propagation传播特性 固定配置 isolation 隔离级别 固定配置 -->
	<!--事务管理者为transactionManager	  -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
		<!--事务传输方式为REQUIRED 在下方配置gfService中如果哪个方法没有创建这几个方法，会自动创建  -->
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 第一个*代表方法返回值
		..*表示扫描到方法级别
		.*是任意方法(在这里)
		(..)方法的任意参数
	 -->
	<aop:config>
		<aop:pointcut id="gftService"
			expression="execution (* com.gft.service.*.*(..))" />
		<aop:advisor advice-ref="advice" pointcut-ref="gftService" />
	</aop:config>
<!-- url:jdbc:mysql://211.88.30.137:3306/cms?useUnicode=true&characterEncoding=utf8 -->
<!-- <tx:annotation-driven transaction-manager="transactionManager"/> --><!-- lpt加的  -->
</beans>